class {
  dom: class {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x: Object) -> Morphism(x, x)
    compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
    idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
    idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
    composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
  }
  cod: class {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x: Object) -> Morphism(x, x)
    compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
    idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
    idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
    composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
  }
  src: class {
    dom: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: dom.Object, Morphism: (dom1, cod1) => dom.Morphism(dom1, cod1), id: (x) => dom.id(x), compose: (x, y, z, f, g) => dom.compose(x, y, z, f, g), idLeft: (x, y, f) => dom.idLeft(x, y, f), idRight: (x, y, f) => dom.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => dom.composeAssociative(x, y, z, w, f, g, h) }
    cod: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: cod.Object, Morphism: (dom2, cod1) => cod.Morphism(dom2, cod1), id: (x) => cod.id(x), compose: (x, y, z, f, g) => cod.compose(x, y, z, f, g), idLeft: (x, y, f) => cod.idLeft(x, y, f), idRight: (x, y, f) => cod.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => cod.composeAssociative(x, y, z, w, f, g, h) }
    map: (dom.Object) -> cod.Object
    fmap: (x: dom.Object, y: dom.Object, dom.Morphism(x, y)) -> cod.Morphism(map(x), map(y))
    fmapPreserveCompose: (x: dom.Object, y: dom.Object, z: dom.Object, f: dom.Morphism(x, y), g: dom.Morphism(y, z)) -> Equal(cod.Morphism(map(x), map(z)), fmap(x, z, dom.compose(x, y, z, f, g)), cod.compose(map(x), map(y), map(z), fmap(x, y, f), fmap(y, z, g)))
    fmapPreserveId: (x: dom.Object) -> Equal(cod.Morphism(map(x), map(x)), fmap(x, x, dom.id(x)), cod.id(map(x)))
  }
  tar: class {
    dom: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: dom.Object, Morphism: (dom1, cod1) => dom.Morphism(dom1, cod1), id: (x) => dom.id(x), compose: (x, y, z, f, g) => dom.compose(x, y, z, f, g), idLeft: (x, y, f) => dom.idLeft(x, y, f), idRight: (x, y, f) => dom.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => dom.composeAssociative(x, y, z, w, f, g, h) }
    cod: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: cod.Object, Morphism: (dom2, cod1) => cod.Morphism(dom2, cod1), id: (x) => cod.id(x), compose: (x, y, z, f, g) => cod.compose(x, y, z, f, g), idLeft: (x, y, f) => cod.idLeft(x, y, f), idRight: (x, y, f) => cod.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => cod.composeAssociative(x, y, z, w, f, g, h) }
    map: (dom.Object) -> cod.Object
    fmap: (x: dom.Object, y: dom.Object, dom.Morphism(x, y)) -> cod.Morphism(map(x), map(y))
    fmapPreserveCompose: (x: dom.Object, y: dom.Object, z: dom.Object, f: dom.Morphism(x, y), g: dom.Morphism(y, z)) -> Equal(cod.Morphism(map(x), map(z)), fmap(x, z, dom.compose(x, y, z, f, g)), cod.compose(map(x), map(y), map(z), fmap(x, y, f), fmap(y, z, g)))
    fmapPreserveId: (x: dom.Object) -> Equal(cod.Morphism(map(x), map(x)), fmap(x, x, dom.id(x)), cod.id(map(x)))
  }
  component: (x: dom.Object) -> cod.Morphism(src.map(x), tar.map(x))
  naturality: (x: dom.Object, y: dom.Object, f: dom.Morphism(x, y)) -> Equal(cod.Morphism(src.map(x), tar.map(y)), cod.compose(src.map(x), tar.map(x), tar.map(y), component(x), tar.fmap(x, y, f)), cod.compose(src.map(x), src.map(y), tar.map(y), src.fmap(x, y, f), component(y)))
}: Type
class {
  dom: class {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x: Object) -> Morphism(x, x)
    compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
    idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
    idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
    composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
  }
  cod: class {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x: Object) -> Morphism(x, x)
    compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
    idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
    idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
    composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
  }
  src: class {
    dom: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: dom.Object, Morphism: (dom1, cod1) => dom.Morphism(dom1, cod1), id: (x) => dom.id(x), compose: (x, y, z, f, g) => dom.compose(x, y, z, f, g), idLeft: (x, y, f) => dom.idLeft(x, y, f), idRight: (x, y, f) => dom.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => dom.composeAssociative(x, y, z, w, f, g, h) }
    cod: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: cod.Object, Morphism: (dom2, cod1) => cod.Morphism(dom2, cod1), id: (x) => cod.id(x), compose: (x, y, z, f, g) => cod.compose(x, y, z, f, g), idLeft: (x, y, f) => cod.idLeft(x, y, f), idRight: (x, y, f) => cod.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => cod.composeAssociative(x, y, z, w, f, g, h) }
    map: (dom.Object) -> cod.Object
    fmap: (x: dom.Object, y: dom.Object, dom.Morphism(x, y)) -> cod.Morphism(map(x), map(y))
    fmapPreserveCompose: (x: dom.Object, y: dom.Object, z: dom.Object, f: dom.Morphism(x, y), g: dom.Morphism(y, z)) -> Equal(cod.Morphism(map(x), map(z)), fmap(x, z, dom.compose(x, y, z, f, g)), cod.compose(map(x), map(y), map(z), fmap(x, y, f), fmap(y, z, g)))
    fmapPreserveId: (x: dom.Object) -> Equal(cod.Morphism(map(x), map(x)), fmap(x, x, dom.id(x)), cod.id(map(x)))
  }
  tar: class {
    dom: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: dom.Object, Morphism: (dom1, cod1) => dom.Morphism(dom1, cod1), id: (x) => dom.id(x), compose: (x, y, z, f, g) => dom.compose(x, y, z, f, g), idLeft: (x, y, f) => dom.idLeft(x, y, f), idRight: (x, y, f) => dom.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => dom.composeAssociative(x, y, z, w, f, g, h) }
    cod: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: cod.Object, Morphism: (dom2, cod1) => cod.Morphism(dom2, cod1), id: (x) => cod.id(x), compose: (x, y, z, f, g) => cod.compose(x, y, z, f, g), idLeft: (x, y, f) => cod.idLeft(x, y, f), idRight: (x, y, f) => cod.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => cod.composeAssociative(x, y, z, w, f, g, h) }
    map: (dom.Object) -> cod.Object
    fmap: (x: dom.Object, y: dom.Object, dom.Morphism(x, y)) -> cod.Morphism(map(x), map(y))
    fmapPreserveCompose: (x: dom.Object, y: dom.Object, z: dom.Object, f: dom.Morphism(x, y), g: dom.Morphism(y, z)) -> Equal(cod.Morphism(map(x), map(z)), fmap(x, z, dom.compose(x, y, z, f, g)), cod.compose(map(x), map(y), map(z), fmap(x, y, f), fmap(y, z, g)))
    fmapPreserveId: (x: dom.Object) -> Equal(cod.Morphism(map(x), map(x)), fmap(x, x, dom.id(x)), cod.id(map(x)))
  }
  component: (x: dom.Object) -> cod.Morphism(src.map(x), tar.map(x))
  naturality: (x: dom.Object, y: dom.Object, f: dom.Morphism(x, y)) -> Equal(cod.Morphism(src.map(x), tar.map(y)), cod.compose(src.map(x), tar.map(x), tar.map(y), component(x), tar.fmap(x, y, f)), cod.compose(src.map(x), src.map(y), tar.map(y), src.fmap(x, y, f), component(y)))
}: Type
refl(vague Type, vague class {
  dom: class {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x: Object) -> Morphism(x, x)
    compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
    idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
    idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
    composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
  }
  cod: class {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x: Object) -> Morphism(x, x)
    compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
    idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
    idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
    composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
  }
  src: class {
    dom: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: dom.Object, Morphism: (dom1, cod1) => dom.Morphism(dom1, cod1), id: (x) => dom.id(x), compose: (x, y, z, f, g) => dom.compose(x, y, z, f, g), idLeft: (x, y, f) => dom.idLeft(x, y, f), idRight: (x, y, f) => dom.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => dom.composeAssociative(x, y, z, w, f, g, h) }
    cod: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: cod.Object, Morphism: (dom2, cod1) => cod.Morphism(dom2, cod1), id: (x) => cod.id(x), compose: (x, y, z, f, g) => cod.compose(x, y, z, f, g), idLeft: (x, y, f) => cod.idLeft(x, y, f), idRight: (x, y, f) => cod.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => cod.composeAssociative(x, y, z, w, f, g, h) }
    map: (dom.Object) -> cod.Object
    fmap: (x: dom.Object, y: dom.Object, dom.Morphism(x, y)) -> cod.Morphism(map(x), map(y))
    fmapPreserveCompose: (x: dom.Object, y: dom.Object, z: dom.Object, f: dom.Morphism(x, y), g: dom.Morphism(y, z)) -> Equal(cod.Morphism(map(x), map(z)), fmap(x, z, dom.compose(x, y, z, f, g)), cod.compose(map(x), map(y), map(z), fmap(x, y, f), fmap(y, z, g)))
    fmapPreserveId: (x: dom.Object) -> Equal(cod.Morphism(map(x), map(x)), fmap(x, x, dom.id(x)), cod.id(map(x)))
  }
  tar: class {
    dom: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: dom.Object, Morphism: (dom1, cod1) => dom.Morphism(dom1, cod1), id: (x) => dom.id(x), compose: (x, y, z, f, g) => dom.compose(x, y, z, f, g), idLeft: (x, y, f) => dom.idLeft(x, y, f), idRight: (x, y, f) => dom.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => dom.composeAssociative(x, y, z, w, f, g, h) }
    cod: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: cod.Object, Morphism: (dom2, cod1) => cod.Morphism(dom2, cod1), id: (x) => cod.id(x), compose: (x, y, z, f, g) => cod.compose(x, y, z, f, g), idLeft: (x, y, f) => cod.idLeft(x, y, f), idRight: (x, y, f) => cod.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => cod.composeAssociative(x, y, z, w, f, g, h) }
    map: (dom.Object) -> cod.Object
    fmap: (x: dom.Object, y: dom.Object, dom.Morphism(x, y)) -> cod.Morphism(map(x), map(y))
    fmapPreserveCompose: (x: dom.Object, y: dom.Object, z: dom.Object, f: dom.Morphism(x, y), g: dom.Morphism(y, z)) -> Equal(cod.Morphism(map(x), map(z)), fmap(x, z, dom.compose(x, y, z, f, g)), cod.compose(map(x), map(y), map(z), fmap(x, y, f), fmap(y, z, g)))
    fmapPreserveId: (x: dom.Object) -> Equal(cod.Morphism(map(x), map(x)), fmap(x, x, dom.id(x)), cod.id(map(x)))
  }
  component: (x: dom.Object) -> cod.Morphism(src.map(x), tar.map(x))
  naturality: (x: dom.Object, y: dom.Object, f: dom.Morphism(x, y)) -> Equal(cod.Morphism(src.map(x), tar.map(y)), cod.compose(src.map(x), tar.map(x), tar.map(y), component(x), tar.fmap(x, y, f)), cod.compose(src.map(x), src.map(y), tar.map(y), src.fmap(x, y, f), component(y)))
}): Equal(Type, class {
  dom: class {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x: Object) -> Morphism(x, x)
    compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
    idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
    idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
    composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
  }
  cod: class {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x: Object) -> Morphism(x, x)
    compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
    idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
    idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
    composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
  }
  src: class {
    dom: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: dom.Object, Morphism: (dom1, cod1) => dom.Morphism(dom1, cod1), id: (x) => dom.id(x), compose: (x, y, z, f, g) => dom.compose(x, y, z, f, g), idLeft: (x, y, f) => dom.idLeft(x, y, f), idRight: (x, y, f) => dom.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => dom.composeAssociative(x, y, z, w, f, g, h) }
    cod: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: cod.Object, Morphism: (dom2, cod1) => cod.Morphism(dom2, cod1), id: (x) => cod.id(x), compose: (x, y, z, f, g) => cod.compose(x, y, z, f, g), idLeft: (x, y, f) => cod.idLeft(x, y, f), idRight: (x, y, f) => cod.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => cod.composeAssociative(x, y, z, w, f, g, h) }
    map: (dom.Object) -> cod.Object
    fmap: (x: dom.Object, y: dom.Object, dom.Morphism(x, y)) -> cod.Morphism(map(x), map(y))
    fmapPreserveCompose: (x: dom.Object, y: dom.Object, z: dom.Object, f: dom.Morphism(x, y), g: dom.Morphism(y, z)) -> Equal(cod.Morphism(map(x), map(z)), fmap(x, z, dom.compose(x, y, z, f, g)), cod.compose(map(x), map(y), map(z), fmap(x, y, f), fmap(y, z, g)))
    fmapPreserveId: (x: dom.Object) -> Equal(cod.Morphism(map(x), map(x)), fmap(x, x, dom.id(x)), cod.id(map(x)))
  }
  tar: class {
    dom: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: dom.Object, Morphism: (dom1, cod1) => dom.Morphism(dom1, cod1), id: (x) => dom.id(x), compose: (x, y, z, f, g) => dom.compose(x, y, z, f, g), idLeft: (x, y, f) => dom.idLeft(x, y, f), idRight: (x, y, f) => dom.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => dom.composeAssociative(x, y, z, w, f, g, h) }
    cod: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: cod.Object, Morphism: (dom2, cod1) => cod.Morphism(dom2, cod1), id: (x) => cod.id(x), compose: (x, y, z, f, g) => cod.compose(x, y, z, f, g), idLeft: (x, y, f) => cod.idLeft(x, y, f), idRight: (x, y, f) => cod.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => cod.composeAssociative(x, y, z, w, f, g, h) }
    map: (dom.Object) -> cod.Object
    fmap: (x: dom.Object, y: dom.Object, dom.Morphism(x, y)) -> cod.Morphism(map(x), map(y))
    fmapPreserveCompose: (x: dom.Object, y: dom.Object, z: dom.Object, f: dom.Morphism(x, y), g: dom.Morphism(y, z)) -> Equal(cod.Morphism(map(x), map(z)), fmap(x, z, dom.compose(x, y, z, f, g)), cod.compose(map(x), map(y), map(z), fmap(x, y, f), fmap(y, z, g)))
    fmapPreserveId: (x: dom.Object) -> Equal(cod.Morphism(map(x), map(x)), fmap(x, x, dom.id(x)), cod.id(map(x)))
  }
  component: (x: dom.Object) -> cod.Morphism(src.map(x), tar.map(x))
  naturality: (x: dom.Object, y: dom.Object, f: dom.Morphism(x, y)) -> Equal(cod.Morphism(src.map(x), tar.map(y)), cod.compose(src.map(x), tar.map(x), tar.map(y), component(x), tar.fmap(x, y, f)), cod.compose(src.map(x), src.map(y), tar.map(y), src.fmap(x, y, f), component(y)))
}, class {
  dom: class {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x: Object) -> Morphism(x, x)
    compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
    idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
    idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
    composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
  }
  cod: class {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x: Object) -> Morphism(x, x)
    compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
    idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
    idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
    composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
  }
  src: class {
    dom: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: dom.Object, Morphism: (dom1, cod1) => dom.Morphism(dom1, cod1), id: (x) => dom.id(x), compose: (x, y, z, f, g) => dom.compose(x, y, z, f, g), idLeft: (x, y, f) => dom.idLeft(x, y, f), idRight: (x, y, f) => dom.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => dom.composeAssociative(x, y, z, w, f, g, h) }
    cod: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: cod.Object, Morphism: (dom2, cod1) => cod.Morphism(dom2, cod1), id: (x) => cod.id(x), compose: (x, y, z, f, g) => cod.compose(x, y, z, f, g), idLeft: (x, y, f) => cod.idLeft(x, y, f), idRight: (x, y, f) => cod.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => cod.composeAssociative(x, y, z, w, f, g, h) }
    map: (dom.Object) -> cod.Object
    fmap: (x: dom.Object, y: dom.Object, dom.Morphism(x, y)) -> cod.Morphism(map(x), map(y))
    fmapPreserveCompose: (x: dom.Object, y: dom.Object, z: dom.Object, f: dom.Morphism(x, y), g: dom.Morphism(y, z)) -> Equal(cod.Morphism(map(x), map(z)), fmap(x, z, dom.compose(x, y, z, f, g)), cod.compose(map(x), map(y), map(z), fmap(x, y, f), fmap(y, z, g)))
    fmapPreserveId: (x: dom.Object) -> Equal(cod.Morphism(map(x), map(x)), fmap(x, x, dom.id(x)), cod.id(map(x)))
  }
  tar: class {
    dom: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: dom.Object, Morphism: (dom1, cod1) => dom.Morphism(dom1, cod1), id: (x) => dom.id(x), compose: (x, y, z, f, g) => dom.compose(x, y, z, f, g), idLeft: (x, y, f) => dom.idLeft(x, y, f), idRight: (x, y, f) => dom.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => dom.composeAssociative(x, y, z, w, f, g, h) }
    cod: class {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x: Object) -> Morphism(x, x)
      compose: (x: Object, y: Object, z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
      idLeft: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
      idRight: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
      composeAssociative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
    } = { Object: cod.Object, Morphism: (dom2, cod1) => cod.Morphism(dom2, cod1), id: (x) => cod.id(x), compose: (x, y, z, f, g) => cod.compose(x, y, z, f, g), idLeft: (x, y, f) => cod.idLeft(x, y, f), idRight: (x, y, f) => cod.idRight(x, y, f), composeAssociative: (x, y, z, w, f, g, h) => cod.composeAssociative(x, y, z, w, f, g, h) }
    map: (dom.Object) -> cod.Object
    fmap: (x: dom.Object, y: dom.Object, dom.Morphism(x, y)) -> cod.Morphism(map(x), map(y))
    fmapPreserveCompose: (x: dom.Object, y: dom.Object, z: dom.Object, f: dom.Morphism(x, y), g: dom.Morphism(y, z)) -> Equal(cod.Morphism(map(x), map(z)), fmap(x, z, dom.compose(x, y, z, f, g)), cod.compose(map(x), map(y), map(z), fmap(x, y, f), fmap(y, z, g)))
    fmapPreserveId: (x: dom.Object) -> Equal(cod.Morphism(map(x), map(x)), fmap(x, x, dom.id(x)), cod.id(map(x)))
  }
  component: (x: dom.Object) -> cod.Morphism(src.map(x), tar.map(x))
  naturality: (x: dom.Object, y: dom.Object, f: dom.Morphism(x, y)) -> Equal(cod.Morphism(src.map(x), tar.map(y)), cod.compose(src.map(x), tar.map(x), tar.map(y), component(x), tar.fmap(x, y, f)), cod.compose(src.map(x), src.map(y), tar.map(y), src.fmap(x, y, f), component(y)))
})
