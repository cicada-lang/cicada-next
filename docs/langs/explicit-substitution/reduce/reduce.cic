import { Exp } from "../exp/index.cic"
import { modFind, Mod } from "../mod/index.cic"
import { doAp } from "./doAp.cic"
import { substitute } from "./substitute.cic"

// NOTE `reduce` might hit fixpoint on other kind of expressions,
// but it will always remove `Let`.

export function reduce(mod: Mod, exp: Exp): Exp {
  match (exp) {
    case Exp::Var(name) => match (modFind(mod, name)) {
      case Maybe::Just(defintion) => exp
      case Maybe::Nothing() => reduce(mod, defintion.exp)
    }

    case Exp::Fn(name, ret) =>
      Exp::Fn(exp.name, reduce(mod, ret))

    case Exp::Ap(target, arg) =>
      doAp(mod, reduce(mod, target), reduce(mod, arg))

    case Exp::Let(bindings, body) =>
      reduce(mod, substitute(body, bindings))
  }
}
