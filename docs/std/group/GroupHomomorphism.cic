import { Group } from "Group.cic"
import { Category } from "../category/index.cic"
import { equalSwap, equalMap, equalCompose } from "../equality/index.cic"

class GroupHomomorphism {
  dom: Group
  cod: Group

  homo(dom.Element): cod.Element
  homoPreserveId: Equal(cod.Element, homo(dom.id), cod.id)
  homoPreserveMul(x: dom.Element, y: dom.Element): Equal(
    cod.Element,
    homo(dom.mul(x, y)),
    cod.mul(homo(x), homo(y)),
  )
}

function idGroupHomomorphism(G: Group): GroupHomomorphism(G, G) {
  return {
    dom: G,
    cod: G,
    homo: (x) => x,
    homoPreserveId: refl,
    homoPreserveMul: (x, y) => refl,
  }
}

function composeGroupHomomorphism(
  implicit G: Group,
  implicit H: Group,
  implicit K: Group,
  f: GroupHomomorphism(G, H),
  g: GroupHomomorphism(H, K),
): GroupHomomorphism(G, K) {
  return {
    dom: G,
    cod: K,

    homo: (x: G.Element) => g.homo(f.homo(x)),

    homoPreserveId: equivalent K.Element {
        g.homo(f.homo(G.id))
      | equalMap(g.homo, f.homoPreserveId)
      = g.homo(H.id)
      | g.homoPreserveId
      = K.id
    },

    homoPreserveMul: (x, y) => equivalent K.Element {
        g.homo(f.homo(G.mul(x, y)))
      | equalMap(g.homo, f.homoPreserveMul(x, y))
      = g.homo(H.mul(f.homo(x), f.homo(y)))
      | g.homoPreserveMul(f.homo(x), f.homo(y))
      = K.mul(g.homo(f.homo(x)), g.homo(f.homo(y)))
    },
  }
}
