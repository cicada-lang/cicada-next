import {
  GroupHomomorphism,
  idGroupHomomorphism,
  composeGroupHomomorphism,
} from "GroupHomomorphism.cic"
import { trivialGroup } from "trivialGroup.cic"
import { Group } from "Group.cic"

compute idGroupHomomorphism(trivialGroup)

compute composeGroupHomomorphism(
  implicit trivialGroup,
  implicit trivialGroup,
  implicit trivialGroup,
  idGroupHomomorphism(trivialGroup),
  idGroupHomomorphism(trivialGroup),
)

function typeof(implicit T: Type, x: T): Type {
  return T
}

solve (G: Group, H: Group, K: Group) {
  GroupHomomorphism(G, H) = typeof(idGroupHomomorphism(trivialGroup))
  GroupHomomorphism(H, K) = typeof(idGroupHomomorphism(trivialGroup))
}

// TODO Fail to compute the following:
// [unifyType]
//   left: Trivial
//   right: ?G.Element
// [unifyType] is not implemented for the pair of type values
//   left: Trivial
//   right: ?G.Element

compute composeGroupHomomorphism(
  idGroupHomomorphism(trivialGroup),
  idGroupHomomorphism(trivialGroup),
)
