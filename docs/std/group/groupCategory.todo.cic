import { Group } from "Group.cic"
import { Category } from "../category/index.cic"
import { equalSwap, equalMap, equalCompose } from "../equality/index.cic"
import {
  GroupHomomorphism,
  idGroupHomomorphism,
  composeGroupHomomorphism,
} from "GroupHomomorphism.cic"

let groupCategory = new Category {
  Object: Group,
  Morphism: (G, H) => GroupHomomorphism(G, H),
  id: idGroupHomomorphism,
  compose: composeGroupHomomorphism,

  // idLeft: (f) => refl,

  // idLeft: (implicit G, implicit H, f) => {
  //   let motive = Equal(
  //     GroupHomomorphism(G, H),
  //     composeGroupHomomorphism(idGroupHomomorphism(G), f),
  //     f,
  //   )

  //   // NOTE To prove Equal between objects,
  //   //   is to prove Equal between each property.
  //   //   How should we express this in our formal language?
  //   //   - Take Equal between elements of Pair as a simpler example.

  //   // TODO Should we use the following?
  //   check G.idLeft: (x: G.Element) -> Equal(G.Element, G.mul(G.id, x), x)
  //   check f.homoPreserveId: Equal(H.Element, f.homo(G.id), H.id)

  //   return the(motive, refl)
  // },

  idLeft: (f) => {
    let G = f.dom
    let H = f.cod

    let motive = Equal(
      GroupHomomorphism(G, H),
      composeGroupHomomorphism(idGroupHomomorphism(G), f),
      f,
    )

    return the(motive, refl)
  },

  // TODO Later

  // // given G: Group, H: Group
  // idRight: (f: GroupHomomorphism(G, H)) => same(f)

  // // given G: Group, H: Group, K: Group, L: Group
  // composeAssociative: (f: GroupHomomorphism(G, H), g: GroupHomomorphism(H, K), h: GroupHomomorphism(K, L)) => refl
}
