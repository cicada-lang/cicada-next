import { BooleanLattice } from "BooleanLattice.cic"
import { dual } from "dual.cic"
import { equalSwap, equalCompose } from "../equality/index.cic"

function joinUniqueId(
  lattice: BooleanLattice,
  o: lattice.Element,
  o_is_identity_of_join: (x: lattice.Element) -> Equal(
    lattice.Element,
    lattice.join(x, o),
    x,
  ),
): Equal(lattice.Element, o, lattice.bottom) {
  return equivalent lattice.Element {
      o
    | equalSwap(lattice.bottomIdJoin(o))
    = lattice.join(o, lattice.bottom)
    | equalSwap(lattice.joinCommutative(lattice.bottom, o))
    = lattice.join(lattice.bottom, o)
    | o_is_identity_of_join(lattice.bottom)
    = lattice.bottom
  }
}


function meetUniqueId(
  lattice: BooleanLattice,
  i: lattice.Element,
  i_is_identity_of_meet: (x: lattice.Element) -> Equal(
    lattice.Element,
    lattice.meet(x, i),
    x,
  ),
): Equal(lattice.Element, i, lattice.top) {
  return joinUniqueId(
    dual(lattice),
    i,
    i_is_identity_of_meet,
  )
}
