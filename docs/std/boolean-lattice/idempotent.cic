import { BooleanLattice } from "BooleanLattice.cic"
import { dual } from "dual.cic"
import { equalMap, equalSwap, equalCompose } from "../equality/index.cic"

// - https://en.wikipedia.org/wiki/Idempotence

function joinIdempotent(
  lattice: BooleanLattice,
  x: lattice.Element,
): Equal(
  lattice.Element,
  lattice.join(x, x),
  x,
) {
  return equivalent lattice.Element {
      lattice.join(x, x)
    | equalSwap(lattice.topIdMeet(lattice.join(x, x)))
    = lattice.meet(lattice.join(x, x), lattice.top)
    | equalMap(
        (z: lattice.Element) => lattice.meet(lattice.join(x, x), z),
        equalSwap(lattice.complementJoinForTop(x)),
      )
    = lattice.meet(lattice.join(x, x), lattice.join(x, lattice.complement(x)))
    | equalSwap(lattice.joinDistributeMeet(x, x, lattice.complement(x)))
    = lattice.join(x, lattice.meet(x, lattice.complement(x)))
    | equalMap(
        (z: lattice.Element) => lattice.join(x, z),
        lattice.complementMeetForBottom(x),
      )
    = lattice.join(x, lattice.bottom)
    | lattice.bottomIdJoin(x)
    = x
  }
}

function meetIdempotent(
  lattice: BooleanLattice,
  x: lattice.Element,
): Equal(
  lattice.Element,
  lattice.meet(x, x),
  x,
) {
  return joinIdempotent(dual(lattice), x)
}
