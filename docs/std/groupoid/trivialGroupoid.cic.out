{
  cat: {
    Object: Trivial,
    Morphism: (dom, cod) => Trivial,
    id: (x) => sole,
    compose: (implicit x, implicit y, implicit z, f, g) => sole,
    idLeft: (implicit x, implicit y, f) => refl(implicit Trivial, implicit sole),
    idRight: (implicit x, implicit y, f) => refl(implicit Trivial, implicit sole),
    composeAssociative: (implicit x, implicit y, implicit z, implicit w, f, g, h) => refl(implicit Trivial, implicit sole)
  },
  dom: sole,
  cod: sole,
  morphism: sole,
  inverse: sole,
  inverseLeft: refl(implicit Trivial, implicit sole),
  inverseRight: refl(implicit Trivial, implicit sole)
}: class Isomorphism {
  cat: class Category {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x: Object) -> Morphism(x, x)
    compose: (
      implicit x: Object,
      implicit y: Object,
      implicit z: Object,
      Morphism(x, y),
      Morphism(y, z),
    ) -> Morphism(x, z)
    idLeft: (implicit x: Object, implicit y: Object, f: Morphism(x, y)) -> Equal(
      Morphism(x, y),
      compose(implicit x, implicit x, implicit y, id(x), f),
      f,
    )
    idRight: (implicit x: Object, implicit y: Object, f: Morphism(x, y)) -> Equal(
      Morphism(x, y),
      compose(implicit x, implicit y, implicit y, f, id(y)),
      f,
    )
    composeAssociative: (
      implicit x: Object,
      implicit y: Object,
      implicit z: Object,
      implicit w: Object,
      f: Morphism(x, y),
      g: Morphism(y, z),
      h: Morphism(z, w),
    ) -> Equal(
      Morphism(x, w),
      compose(
        implicit x,
        implicit y,
        implicit w,
        f,
        compose(implicit y, implicit z, implicit w, g, h),
      ),
      compose(
        implicit x,
        implicit z,
        implicit w,
        compose(implicit x, implicit y, implicit z, f, g),
        h,
      ),
    )
  } = {
    Object: Trivial,
    Morphism: (dom, cod) => Trivial,
    id: (x) => sole,
    compose: (implicit x, implicit y, implicit z, f, g) => sole,
    idLeft: (implicit x, implicit y, f) => refl(implicit Trivial, implicit sole),
    idRight: (implicit x, implicit y, f) => refl(implicit Trivial, implicit sole),
    composeAssociative: (implicit x, implicit y, implicit z, implicit w, f, g, h) => refl(implicit Trivial, implicit sole)
  }
  dom: Trivial = sole
  cod: Trivial = sole
  morphism: Trivial = sole
  inverse: Trivial = sole
  inverseLeft: Equal(Trivial, sole, sole) = refl(implicit Trivial, implicit sole)
  inverseRight: Equal(Trivial, sole, sole) = refl(implicit Trivial, implicit sole)
}
{
  Object: Trivial,
  Morphism: (dom, cod) => Trivial,
  id: (x) => sole,
  compose: (implicit x, implicit y, implicit z, f, g) => sole,
  idLeft: (implicit x, implicit y, f) => refl(implicit Trivial, implicit sole),
  idRight: (implicit x, implicit y, f) => refl(implicit Trivial, implicit sole),
  composeAssociative: (implicit x, implicit y, implicit z, implicit w, f, g, h) => refl(implicit Trivial, implicit sole),
  inverse: (implicit x, implicit y, f) => sole,
  inverseIso: (implicit x, implicit y, f) => {
    cat: {
      Object: Trivial,
      Morphism: (dom, cod) => Trivial,
      id: (x1) => sole,
      compose: (implicit x1, implicit y1, implicit z, f1, g) => sole,
      idLeft: (implicit x1, implicit y1, f1) => refl(implicit Trivial, implicit sole),
      idRight: (implicit x1, implicit y1, f1) => refl(implicit Trivial, implicit sole),
      composeAssociative: (implicit x1, implicit y1, implicit z, implicit w, f1, g, h) => refl(implicit Trivial, implicit sole)
    },
    dom: sole,
    cod: sole,
    morphism: sole,
    inverse: sole,
    inverseLeft: refl(implicit Trivial, implicit sole),
    inverseRight: refl(implicit Trivial, implicit sole)
  }
}: class Groupoid {
  Object: Type = Trivial
  Morphism: (Trivial, Trivial) -> Type = (dom, cod) => Trivial
  id: (Trivial) -> Trivial = (x) => sole
  compose: (
    implicit x: Trivial,
    implicit y: Trivial,
    implicit z: Trivial,
    Trivial,
    Trivial,
  ) -> Trivial = (implicit x, implicit y, implicit z, f, g) => sole
  idLeft: (implicit x: Trivial, implicit y: Trivial, Trivial) -> Equal(Trivial, sole, sole) = (implicit x, implicit y, f) => refl(implicit Trivial, implicit sole)
  idRight: (implicit x: Trivial, implicit y: Trivial, Trivial) -> Equal(Trivial, sole, sole) = (implicit x, implicit y, f) => refl(implicit Trivial, implicit sole)
  composeAssociative: (
    implicit x: Trivial,
    implicit y: Trivial,
    implicit z: Trivial,
    implicit w: Trivial,
    Trivial,
    Trivial,
    Trivial,
  ) -> Equal(Trivial, sole, sole) = (implicit x, implicit y, implicit z, implicit w, f, g, h) => refl(implicit Trivial, implicit sole)
  inverse: (implicit x: Trivial, implicit y: Trivial, Trivial) -> Trivial = (implicit x, implicit y, f) => sole
  inverseIso: (implicit x: Trivial, implicit y: Trivial, Trivial) -> class Isomorphism {
    cat: class Category {
      Object: Type
      Morphism: (Object, Object) -> Type
      id: (x1: Object) -> Morphism(x1, x1)
      compose: (
        implicit x1: Object,
        implicit y1: Object,
        implicit z: Object,
        Morphism(x1, y1),
        Morphism(y1, z),
      ) -> Morphism(x1, z)
      idLeft: (
        implicit x1: Object,
        implicit y1: Object,
        f1: Morphism(x1, y1),
      ) -> Equal(
        Morphism(x1, y1),
        compose(implicit x1, implicit x1, implicit y1, id(x1), f1),
        f1,
      )
      idRight: (
        implicit x1: Object,
        implicit y1: Object,
        f1: Morphism(x1, y1),
      ) -> Equal(
        Morphism(x1, y1),
        compose(implicit x1, implicit y1, implicit y1, f1, id(y1)),
        f1,
      )
      composeAssociative: (
        implicit x1: Object,
        implicit y1: Object,
        implicit z: Object,
        implicit w: Object,
        f1: Morphism(x1, y1),
        g: Morphism(y1, z),
        h: Morphism(z, w),
      ) -> Equal(
        Morphism(x1, w),
        compose(
          implicit x1,
          implicit y1,
          implicit w,
          f1,
          compose(implicit y1, implicit z, implicit w, g, h),
        ),
        compose(
          implicit x1,
          implicit z,
          implicit w,
          compose(implicit x1, implicit y1, implicit z, f1, g),
          h,
        ),
      )
    } = {
      Object: Trivial,
      Morphism: (dom, cod) => Trivial,
      id: (x1) => sole,
      compose: (implicit x1, implicit y1, implicit z, f1, g) => sole,
      idLeft: (implicit x1, implicit y1, f1) => refl(implicit Trivial, implicit sole),
      idRight: (implicit x1, implicit y1, f1) => refl(implicit Trivial, implicit sole),
      composeAssociative: (implicit x1, implicit y1, implicit z, implicit w, f1, g, h) => refl(implicit Trivial, implicit sole)
    }
    dom: Trivial = sole
    cod: Trivial = sole
    morphism: Trivial = sole
    inverse: Trivial = sole
    inverseLeft: Equal(Trivial, sole, sole)
    inverseRight: Equal(Trivial, sole, sole)
  } = (implicit x, implicit y, f) => {
    cat: {
      Object: Trivial,
      Morphism: (dom, cod) => Trivial,
      id: (x1) => sole,
      compose: (implicit x1, implicit y1, implicit z, f1, g) => sole,
      idLeft: (implicit x1, implicit y1, f1) => refl(implicit Trivial, implicit sole),
      idRight: (implicit x1, implicit y1, f1) => refl(implicit Trivial, implicit sole),
      composeAssociative: (implicit x1, implicit y1, implicit z, implicit w, f1, g, h) => refl(implicit Trivial, implicit sole)
    },
    dom: sole,
    cod: sole,
    morphism: sole,
    inverse: sole,
    inverseLeft: refl(implicit Trivial, implicit sole),
    inverseRight: refl(implicit Trivial, implicit sole)
  }
}
